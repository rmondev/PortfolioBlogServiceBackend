Date: 2025-02-15 2:56 PM
Title: Portfolio Website Blog Service
Body:
    I want to create a backend blog blog service for my portfolio website.
    I am going to write it in TypeScript, to help sharpen up my TypeScript skills.
    I want to host the database locally on my home network NAS. The brand is Synology Diskstation DS223j.
    The NAS has a web-accessible UI, that runs an OS called "DiskStation Manager". DiskStation Manager has a program suite for NAS management, as well as a Container Manager to create and manage Docker instances. I want to host the database for this blog service using a Docker container on my NAS. The container will be created using a PostgresSQL image provided by the Container Manager. Since I don't want direct connections from the internet to my home NAS, I will route backend calls to the NAS hosted database via Cloudflare. 

    For the backend service, I will be using the Node.js runtime and the Express.js framework to run API calls for the blog (GET, POST, PUT, DELETE).

    The blog posts will be held in a table called "Posts". Attributes for each Post will be:

        - ID (PK, auto-generated)
        - DATE(Date)
        - CATEGORY(String)
        - TITLE(sting)
        - BODY

    Before I get to ahead of myself, I'll need to set up the environment and figure out how host my PostgresSQL service locally on my NAS.


Date: 2025-02-15 6:27 PM
Title: Setup postgres container
Body:
    - Created container using Container Manager and postgres image
    - Needed to install PostgreSQL on Windows
    - Needed to add 'psql' to Windows PATH list
    - Test connection to NAS-hosted PostgresSQL
    - Test was successful; I was able to connect externally from my Windows terminal to the NAS postgres database

Date: 2025-02-16 10:46 PM
Title: Cloudflare Tunnel for PostgresSQL Step 1: Adding Authentication Middleware
Body:
    Before setting up the Cloudflare tunnel I need to add API authentication.
    Since I am hosting a PostgreSQL server on my private home network NAS, I need additional security to handle incoming and outgoing traffic. For this, I need to implement API key authentication in the Express.js backend I created to ensure that only authorized requests can access the API endpoints. I had to create a HEX coded key using the CLI command 'openssl rand -hex 32'. This created a unique key. 

    API Key Authentication Middleware (Implemented in server.ts):

    app.use((req: Request, res: Response, next: NextFunction): void => {
    const apiKey = req.headers["x-api-key"]; // ðŸ”¹ Extract API key from request headers
    console.log("Received API Key:", apiKey);
    console.log("Loaded API Key from .env:", process.env.API_KEY);

    if (apiKey !== process.env.API_KEY) {
        console.log("API Key Mismatch!"); // Debugging log
        res.status(403).json({ error: "Unauthorized" }); // ðŸ”¹ Reject unauthorized access
        return;
    }

    next(); // ðŸ”¹ Allow request to proceed if the API key is valid
    });

    The reason for using this middleware:

    1. Extracts the API key from the x-api-key request header.
    2. Compares it with the API key stored in .env.
    3. Logs both the received and expected keys (for debugging).
    4. Blocks unauthorized requests (403 Forbidden) if the key is missing or incorrect.
    5. Calls next() to allow the request to continue only if the key is valid.

    Why This Is Important: 

    This middleware acts as a first layer of defense, preventing unauthorized access before our API is exposed to the internet.


Date: 2025-02-16 10:46 PM
Title: Cloudflare Tunnel for PostgresSQL Step 2: Exposing the API via Cloudflare
Body:
    Now that the API authentication is in place, I need to route external traffic securely through Cloudflare so that it can be accessed online without exposing the NAS directly to the internet.

    Instead of exposing my NAS's public IP and relying on firewall rules, Cloudflare Tunnel (previously known as Argo Tunnel) allows you to securely connect my Express.js API to Cloudflare without opening any inbound ports.

    How Cloudflare Tunnel Works
    - No Exposed Ports: My Synology NAS stays completely hidden from the internet.
    - Cloudflare Agent Runs Locally: A small agent (cloudflared) runs on my NAS and creates an outbound secure connection to Cloudflare.
    - Cloudflare Handles Requests: Instead of sending requests to my NASâ€™s public IP, users access api.yourdomain.com, and Cloudflare securely forwards traffic through the tunnel.

    Why am I using Cloudflare?
    
    Cloudflare Tunnel provides a more secure alternative to exposing a public IP by creating an encrypted outbound connection from your NAS to Cloudflare, eliminating the need to open ports like 5000 or 5432 on your firewall. Unlike a traditional public IP setup, which still leaves your NAS partially exposed even when using Cloudflare's proxy, Cloudflare Tunnel fully hides your NAS from the internet, ensuring that all traffic flows exclusively through Cloudflare's network. This not only enhances security by blocking direct attacks and unauthorized access but also provides built-in DDoS protection without relying on complex firewall rules. With Cloudflare Tunnel, only Cloudflare can communicate with your backend, reducing risks while maintaining controlled and secure access to your Express.js API.